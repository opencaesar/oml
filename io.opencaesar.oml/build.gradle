ext.title = 'Oml API'
description = 'Java API for Oml'

apply from: "${rootDir}/gradle/maven-deployment.gradle"
/*apply plugin: "org.xtext.builder"*/

dependencies {
	api "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	api "org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:${xcoreLibVersion}"
	api "xml-resolver:xml-resolver:${xmlResolverVersion}"
	api "org.eclipse.emfcloud:emfjson-jackson:${emfJsonVersion}"
	
	/*xtextLanguages ("org.eclipse.emf:org.eclipse.emf.ecore.xcore:+"){
		exclude group: 'org.antlr', module: 'antlr-runtime'
	}
    xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:+'
    xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore:+'
    xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:+'
    xtextLanguages "org.eclipse.xtext:org.eclipse.xtext.ecore:${xtextVersion}"*/
}

/*xtext {
	languages {
		ecore {
			setup = 'org.eclipse.xtext.ecore.EcoreSupport'
		}
		codegen {
			setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
		}
		xcore {
			setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
			generator.outlet.producesJava = true
		}
	}
	sourceSets.main.output.dir(xtext.languages.xcore.generator.outlet, 'src-gen')
}
processResources.dependsOn(generateXtext)*/


assemble.dependsOn javadoc
