ext.title = 'Oml Textual Language'
description = 'Language infrastructure for Oml based on Xtext'

apply from: "${rootDir}/gradle/maven-deployment.gradle"

dependencies {
	api project(':io.opencaesar.oml')
	api "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	api "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	api "com.google.code.gson:gson:${gsonVersion}"
}

configurations {
	mwe2 {
		extendsFrom compileClasspath
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator"
    mwe2 ("org.eclipse.emf:org.eclipse.emf.ecore.xcore:${xcoreVersion}"){
		exclude group: 'org.antlr', module: 'antlr-runtime'
	}
}

task generateXtextLanguage(type: JavaExec) {
	mainClass = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/io/opencaesar/oml/dsl/GenerateOml.mwe2"
	inputs.file "src/io/opencaesar/oml/dsl/Oml.xtext"
	outputs.dir "src-gen"
	args += "src/io/opencaesar/oml/dsl/GenerateOml.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

processResources.dependsOn(generateXtextLanguage)
compileJava.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false