/**
 * Copyright 2019 California Institute of Technology ("Caltech").
 * U.S. Government sponsorship acknowledged.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar io.opencaesar.oml.dsl.Oml hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://opencaesar.io/oml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Ontology:
	VocabularyBox |
	DescriptionBox;

Annotation:
	'@' {Annotation} property=[AnnotationProperty|Ref] (literalValue=Literal | referenceValue=[Member|Ref])?;

VocabularyBox:
	Vocabulary |
	VocabularyBundle;

Vocabulary:
	ownedAnnotations+=Annotation*
	'vocabulary' namespace=NAMESPACE 'as' prefix=ID  '{'
		ownedImports+=(Extension|Usage)*
		ownedStatements+=VocabularyStatement*
	'}';

VocabularyBundle:
	ownedAnnotations+=Annotation*
	'vocabulary' 'bundle' namespace=NAMESPACE 'as' prefix=ID '{'
		ownedImports+=(Extension|Inclusion)*
	'}';

DescriptionBox:
	Description |
	DescriptionBundle;
	
Description:
	ownedAnnotations+=Annotation*
	'description' namespace=NAMESPACE 'as' prefix=ID '{'
		ownedImports+=(Extension|Usage)*
		ownedStatements+=DescriptionStatement*
	'}';

DescriptionBundle:
	ownedAnnotations+=Annotation*
	'description' 'bundle' namespace=NAMESPACE 'as' prefix=ID '{'
		ownedImports+=(Extension|Usage|Inclusion)*
	'}';

SpecializableTerm:
	Type |
	AnnotationProperty |
	ScalarProperty |
	StructuredProperty |
	UnreifiedRelation;

Type:
	Classifier |
	Scalar;	

Classifier:
	Entity |
	Structure;
	
Entity:
	Aspect |
	Concept |
	RelationEntity;

Aspect:
	ownedAnnotations+=Annotation*
	'aspect' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(ownedKeys+=KeyAxiom | 
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
	']')?;

Concept:
	ownedAnnotations+=Annotation*
	'concept' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(ownedKeys+=KeyAxiom | 
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
		('enumerates' enumeratedInstances+=[ConceptInstance|Ref] (',' enumeratedInstances+=[ConceptInstance|Ref])*)?
	']')?;
	
RelationEntity:
	ownedAnnotations+=Annotation*
	'relation' 'entity' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? '['
		'from' source=[Entity|Ref]
		'to' target=[Entity|Ref]
		((forwardRelation=ForwardRelation)? &
		 (reverseRelation=ReverseRelation)?)
		((functional?='functional')? &
		 (inverseFunctional?='inverse' 'functional')? &
		 (symmetric?='symmetric')? &
		 (asymmetric?='asymmetric')? &
		 (reflexive?='reflexive')? &
		 (irreflexive?='irreflexive')? &
		 (transitive?='transitive')?)
		(ownedKeys+=KeyAxiom |
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
	']';
	
Structure:
	ownedAnnotations+=Annotation*
	'structure' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		ownedPropertyRestrictions+=PropertyRestrictionAxiom*
	']')?;

Property:
	AnnotationProperty |
	SemanticProperty;

AnnotationProperty:
	ownedAnnotations+=Annotation*
	'annotation' 'property' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

SemanticProperty:
	ScalarProperty |
	StructuredProperty;

ScalarProperty:
	ownedAnnotations+=Annotation*
	'scalar' 'property' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? '['
		'domain' domain=[Classifier|Ref]
		'range' range=[Scalar|Ref]
		(functional?='functional')?
	']';

StructuredProperty:
	ownedAnnotations+=Annotation*
	'structured' 'property' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? '['
		'domain' domain=[Classifier|Ref]
		'range' range=[Structure|Ref]
		(functional?='functional')?
	']';

Scalar:
	FacetedScalar |
	EnumeratedScalar;

FacetedScalar:
	ownedAnnotations+=Annotation*
	'scalar' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		 (('length' length=UnsignedInteger)? &
		 ('minLength' minLength=UnsignedInteger)? &
		 ('maxLength' maxLength=UnsignedInteger)? &
		 ('pattern' pattern=STRING)? &
		 ('language' language=ID)? &
		 ('minInclusive' minInclusive=Literal)? &
		 ('minExclusive' minExclusive=Literal)? &
		 ('maxInclusive' maxInclusive=Literal)? &
		 ('maxExclusive' maxExclusive=Literal)?)
	']')?;

EnumeratedScalar:
	ownedAnnotations+=Annotation*
	'enumerated' 'scalar' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(literals+=Literal (',' literals+=Literal)*)?
	']')?;

Relation:
	ForwardRelation |
	ReverseRelation |
	UnreifiedRelation;

ForwardRelation:
	ownedAnnotations+=Annotation*
	'forward' name=ID;

ReverseRelation:
	ownedAnnotations+=Annotation*
	'reverse' name=ID;

UnreifiedRelation:
	ownedAnnotations+=Annotation*
	'relation' name=ID (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? '['
		'from' source=[Entity|Ref]
		'to' target=[Entity|Ref]
		(reverseRelation=ReverseRelation)?
		((functional?='functional')? &
		 (inverseFunctional?='inverse' 'functional')? &
		 (symmetric?='symmetric')? &
		 (asymmetric?='asymmetric')? &
		 (reflexive?='reflexive')? &
		 (irreflexive?='irreflexive')? &
		 (transitive?='transitive')?)
	']';

Rule:
	ownedAnnotations+=Annotation*
	'rule' name=ID '['
		antecedent+=Predicate ('^' antecedent+=Predicate)* '->' consequent+=Predicate ('^' consequent+=Predicate)*
	']';

StructureInstance:
	
	type=[Structure|Ref] '['
		ownedPropertyValues+=PropertyValueAssertion*
	']';
	
NamedInstance:
	ConceptInstance |
	RelationInstance;

ConceptInstance:
	ownedAnnotations+=Annotation*
	'ci' name=ID (':' ownedTypes+=ConceptTypeAssertion (',' ownedTypes+=ConceptTypeAssertion)*)? ('['
		ownedPropertyValues+=PropertyValueAssertion*
	']')?;
	
RelationInstance:
	ownedAnnotations+=Annotation*
	'ri' name=ID (':' ownedTypes+=RelationTypeAssertion (',' ownedTypes+=RelationTypeAssertion)*)? '['
		'from' sources+=[NamedInstance|Ref] (',' sources+=[NamedInstance|Ref])* 
		'to' targets+=[NamedInstance|Ref] (',' targets+=[NamedInstance|Ref])*
		ownedPropertyValues+=PropertyValueAssertion*
	']';
	
SpecializableTermReference:
	ClassifierReference |
	FacetedScalarReference |
	EnumeratedScalarReference |
	AnnotationPropertyReference |
	ScalarPropertyReference |
	StructuredPropertyReference;

ClassifierReference:
	EntityReference |
	StructureReference;

EntityReference:
	AspectReference |
	ConceptReference |
	RelationEntityReference;
	
AspectReference:
	ownedAnnotations+=Annotation*
	'ref' 'aspect' aspect=[Aspect|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(ownedKeys+=KeyAxiom | 
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
	']')?;

ConceptReference:
	ownedAnnotations+=Annotation*
	'ref' 'concept' concept=[Concept|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(ownedKeys+=KeyAxiom | 
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
	']')?;

RelationEntityReference:
	ownedAnnotations+=Annotation*
	'ref' 'relation' 'entity' entity=[RelationEntity|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		(ownedKeys+=KeyAxiom | 
		 ownedPropertyRestrictions+=PropertyRestrictionAxiom)*
	']')?;

StructureReference:
	ownedAnnotations+=Annotation*
	'ref' 'structure' structure=[Structure|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)? ('['
		ownedPropertyRestrictions+=PropertyRestrictionAxiom*
	']')?;

AnnotationPropertyReference:
	ownedAnnotations+=Annotation*
	'ref' 'annotation' 'property' property=[AnnotationProperty|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

ScalarPropertyReference:
	ownedAnnotations+=Annotation*
	'ref' 'scalar' 'property' property=[ScalarProperty|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

StructuredPropertyReference:
	ownedAnnotations+=Annotation*
	'ref' 'structured' 'property' property=[StructuredProperty|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

FacetedScalarReference:
	ownedAnnotations+=Annotation*
	'ref' 'scalar' scalar=[FacetedScalar|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

EnumeratedScalarReference:
	ownedAnnotations+=Annotation*
	'ref' 'enumerated' 'scalar' scalar=[EnumeratedScalar|Ref] (':>' ownedSpecializations+=SpecializationAxiom (',' ownedSpecializations+=SpecializationAxiom)*)?;

RelationReference:
	ownedAnnotations+=Annotation*
	'ref' 'relation' relation=[Relation|Ref];
	
RuleReference:
	ownedAnnotations+=Annotation*
	'ref' 'rule' rule=[Rule|Ref];

NamedInstanceReference:
	ConceptInstanceReference |
	RelationInstanceReference;

ConceptInstanceReference:
	ownedAnnotations+=Annotation*
	'ref' 'ci' instance=[ConceptInstance|Ref] (':' ownedTypes+=ConceptTypeAssertion (',' ownedTypes+=ConceptTypeAssertion)*)? ('['
		ownedPropertyValues+=PropertyValueAssertion*
	']')?;

RelationInstanceReference:
	ownedAnnotations+=Annotation*
	'ref' 'ri' instance=[RelationInstance|Ref] (':' ownedTypes+=RelationTypeAssertion (',' ownedTypes+=RelationTypeAssertion)*)? ('['
		ownedPropertyValues+=PropertyValueAssertion*
	']')?;

VocabularyStatement:
	Rule |
	RuleReference |
	SpecializableTerm |
	SpecializableTermReference |
	RelationReference;
	
DescriptionStatement:
	NamedInstance |
	NamedInstanceReference;
	
Import:
	Extension |
	Usage |
	Inclusion;

Extension:
	'extends' namespace=NAMESPACE ('as' prefix=ID)?;
    	
Usage:
	'uses' namespace=NAMESPACE ('as' prefix=ID)?;
    	
Inclusion:
	'includes' namespace=NAMESPACE ('as' prefix=ID)?;

SpecializationAxiom:
	specializedTerm=[SpecializableTerm|Ref];
	
PropertyRestrictionAxiom:
	PropertyRangeRestrictionAxiom |
	PropertyCardinalityRestrictionAxiom |
	PropertyValueRestrictionAxiom;

PropertyRangeRestrictionAxiom:
	ScalarPropertyRangeRestrictionAxiom |
	StructuredPropertyRangeRestrictionAxiom |
	RelationRangeRestrictionAxiom;

ScalarPropertyRangeRestrictionAxiom returns PropertyRangeRestrictionAxiom:
	'restricts' kind=RangeRestrictionKind 'scalar' 'property' property=[ScalarProperty|Ref] 'to' range=[Scalar|Ref];

StructuredPropertyRangeRestrictionAxiom returns PropertyRangeRestrictionAxiom:
	'restricts' kind=RangeRestrictionKind 'structured' 'property' property=[StructuredProperty|Ref] 'to' range=[Structure|Ref];

RelationRangeRestrictionAxiom returns PropertyRangeRestrictionAxiom:
	'restricts' kind=RangeRestrictionKind 'relation' property=[Relation|Ref] 'to' range=[Entity|Ref];

PropertyCardinalityRestrictionAxiom:
	ScalarPropertyCardinalityRestrictionAxiom |
	StructuredPropertyCardinalityRestrictionAxiom |
	RelationCardinalityRestrictionAxiom;

ScalarPropertyCardinalityRestrictionAxiom returns PropertyCardinalityRestrictionAxiom:
	'restricts' 'scalar' 'property' property=[ScalarProperty|Ref] 'to' kind=CardinalityRestrictionKind cardinality=UnsignedInteger (range=[Scalar|Ref])?;

StructuredPropertyCardinalityRestrictionAxiom returns PropertyCardinalityRestrictionAxiom:
	'restricts' 'structured' 'property' property=[StructuredProperty|Ref] 'to' kind=CardinalityRestrictionKind cardinality=UnsignedInteger (range=[Structure|Ref])?;

RelationCardinalityRestrictionAxiom returns PropertyCardinalityRestrictionAxiom:
	'restricts' 'relation' property=[Relation|Ref] 'to' kind=CardinalityRestrictionKind cardinality=UnsignedInteger (range=[Entity|Ref])?;

PropertyValueRestrictionAxiom:
	ScalarPropertyValueRestrictionAxiom |
	StructuredPropertyValueRestrictionAxiom |
	RelationValueRestrictionAxiom;
	
ScalarPropertyValueRestrictionAxiom returns PropertyValueRestrictionAxiom:
	'restricts' 'scalar' 'property' property=[ScalarProperty|Ref] 'to' literalValue=Literal;

StructuredPropertyValueRestrictionAxiom returns PropertyValueRestrictionAxiom:
	'restricts' 'structured' 'property' property=[StructuredProperty|Ref] 'to' structureInstanceValue=StructureInstance;

RelationValueRestrictionAxiom returns PropertyValueRestrictionAxiom:
	'restricts' 'relation' property=[Relation|Ref] 'to' namedInstanceValue=[NamedInstance|Ref];

KeyAxiom:
	'key' properties+=[Property|Ref] (',' properties+=[Property|Ref])*;

ConceptTypeAssertion returns TypeAssertion:
	type=[Concept|Ref];

RelationTypeAssertion returns TypeAssertion:
	type=[RelationEntity|Ref];

PropertyValueAssertion:
	ScalarPropertyValueAssertion |
	StructuredPropertyValueAssertion |
	LinkAssertion;

ScalarPropertyValueAssertion returns PropertyValueAssertion:
	property=[ScalarProperty|Ref] literalValue=Literal;

StructuredPropertyValueAssertion returns PropertyValueAssertion:
	property=[StructuredProperty|Ref] structureInstanceValue=StructureInstance;

LinkAssertion returns PropertyValueAssertion:
	property=[Relation|Ref] namedInstanceValue=[NamedInstance|Ref];

Predicate:
	UnaryPredicate |
	BinaryPredicate;

UnaryPredicate:
	TypePredicate;
	
TypePredicate:
	type=[Type|Ref] => '(' variable=ID ')';
	
BinaryPredicate:
	RelationEntityPredicate |
    PropertyPredicate |
    SameAsPredicate |
    DifferentFromPredicate;

RelationEntityPredicate:
    entity=[RelationEntity|Ref] '(' variable1=ID ',' variable=ID ',' (variable2=ID | instance2=[NamedInstance|CrossRef]) ')';

PropertyPredicate:
	property=[Property|Ref] '(' variable1=ID ',' (variable2=ID | literal2=Literal | instance2=[NamedInstance|CrossRef]) ')';

SameAsPredicate:
    'sameAs' '(' variable1=ID ',' (variable2=ID | instance2=[NamedInstance|CrossRef]) ')';

DifferentFromPredicate:
    'differentFrom' '(' variable1=ID ',' (variable2=ID | instance2=[NamedInstance|CrossRef]) ')';

Literal:
	IntegerLiteral |
	DecimalLiteral |
	DoubleLiteral |
	BooleanLiteral |
	QuotedLiteral;

IntegerLiteral:
	value=Integer;

DecimalLiteral:
	value=Decimal;

DoubleLiteral:
	value=Double;

BooleanLiteral:
	value=Boolean;

QuotedLiteral:
	value=STRING (('^^' type=[Scalar|Ref]) | ('$' langTag=ID))?;

enum RangeRestrictionKind:
	all |
	some;

enum CardinalityRestrictionKind:
	exactly |
	min |
	max;

//--------------

Ref returns ecore::EString: 							ID | QNAME | IRI;

CrossRef returns ecore::EString: 						QNAME | IRI;

Boolean returns ecore::EBoolean:						BOOLEAN_STR;

UnsignedInteger returns UnsignedInt: 					UNSIGNED_INTEGER_STR;

Integer returns ecore::EInt: 							UNSIGNED_INTEGER_STR | INTEGER_STR;

Decimal returns Decimal:								DECIMAL_STR;

Double returns ecore::EDouble:							DOUBLE_STR;

//----------------------------

terminal BOOLEAN_STR:									'false'|'true';

terminal UNSIGNED_INTEGER_STR:							DIGIT+;

terminal INTEGER_STR:									('+'|'-')? DIGIT+;

terminal DECIMAL_STR:									('+'|'-')? (DIGIT+('.'DIGIT*)? | ('.'DIGIT+));

terminal DOUBLE_STR:									('+'|'-')? (DIGIT+('.'DIGIT*)? | ('.'DIGIT+)) (('e'|'E') ('+'|'-')? DIGIT+)?;

terminal STRING:										('"' (!('"'|'\\') | '\\'.)* '"') | ("'" (!("'"|'\\') | '\\'.)* "'") | ("'''" -> "'''") | '"""' -> '"""';

terminal NAMESPACE:										'<' (!('>'|' '|'#'))* ('#'|'/') '>';

terminal IRI:											'<' (!('>'|' '))* '>';

terminal ID:											IDFRAG;

terminal QNAME:											IDFRAG ':' IDFRAG;

terminal ML_COMMENT: 									'/*' -> '*/';
 
terminal SL_COMMENT:									'//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS: 											(' '|'\t'|'\r'|'\n')+;

//----------------------------

terminal fragment IDFRAG:								'^'? (ALPHA|DIGIT|'_') (ALPHA|DIGIT|'_'|'-'|'.'|'$')*;

terminal fragment ALPHA:								'a'..'z'| 'A'..'Z';

terminal fragment DIGIT: 								'0'..'9';